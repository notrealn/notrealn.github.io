{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","canvas","document","getElementById","c","getContext","size","direction","Math","random","PI","box","x","width","y","height","xVel","cos","yVel","sin","window","requestAnimationFrame","tick","fillStyle","fillRect","className","id","innerWidth","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+OAGqBA,E,uKACnB,WACE,IAAMC,EAASC,SAASC,eAAe,UACjCC,EAAC,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAQI,WAAW,MAE7B,GAAKJ,GAAWG,EAAhB,CAEA,IAAME,EAAO,IACPC,EAA4B,EAAhBC,KAAKC,SAAeD,KAAKE,GAErCC,EAAM,CACVC,EAAGJ,KAAKC,UAAYR,EAAOY,MAAQP,GACnCQ,EAAGN,KAAKC,UAAYR,EAAOc,OAAST,GACpCU,KAA4B,GAAtBR,KAAKS,IAAIV,GACfW,KAA4B,GAAtBV,KAAKW,IAAIZ,IAqBjBa,OAAOC,uBAlBM,SAAPC,IACJlB,EAAEmB,UAAY,2BACdnB,EAAEoB,SAAS,EAAG,EAAGvB,EAAOY,MAAOZ,EAAOc,QACtCX,EAAEmB,UAAY,UACdnB,EAAEoB,SAASb,EAAIC,EAAGD,EAAIG,EAAGR,EAAMA,GAE/BK,EAAIC,GAAKD,EAAIK,KACbL,EAAIG,GAAKH,EAAIO,MAETP,EAAIC,EAAIX,EAAOY,MAAQP,GAClBK,EAAIC,EAAI,KADgBD,EAAIK,OAAS,IAG1CL,EAAIG,EAAIb,EAAOc,OAAST,GACnBK,EAAIG,EAAI,KADiBH,EAAIO,OAAS,GAG/CE,OAAOC,sBAAsBC,S,oBAMjC,WACE,OACE,sBAAKG,UAAU,MAAf,UACE,gDACA,wBACEC,GAAG,SACHb,MAAOO,OAAOO,WAAa,GAC3BZ,OAAO,e,GA7CgBa,IAAMC,WCWxBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASC,eAAe,SAM1B2B,M","file":"static/js/main.a6f29543.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nexport default class App extends React.Component {\n  componentDidMount() {\n    const canvas = document.getElementById(\"cavnas\") as HTMLCanvasElement;\n    const c = canvas?.getContext(\"2d\");\n\n    if (!canvas || !c) return;\n\n    const size = 100;\n    const direction = Math.random() * 2 * Math.PI;\n\n    const box = {\n      x: Math.random() * (canvas.width - size),\n      y: Math.random() * (canvas.height - size),\n      xVel: Math.cos(direction) * 10,\n      yVel: Math.sin(direction) * 10,\n    };\n\n    const tick = () => {\n      c.fillStyle = \"rgba(255, 255, 255, .05)\";\n      c.fillRect(0, 0, canvas.width, canvas.height);\n      c.fillStyle = \"#000000\";\n      c.fillRect(box.x, box.y, size, size);\n\n      box.x += box.xVel;\n      box.y += box.yVel;\n\n      if (box.x > canvas.width - size) box.xVel *= -1;\n      else if (box.x < 0) box.xVel *= -1;\n\n      if (box.y > canvas.height - size) box.yVel *= -1;\n      else if (box.y < 0) box.yVel *= -1;\n\n      window.requestAnimationFrame(tick);\n    };\n\n    window.requestAnimationFrame(tick);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <p>this is website</p>\n        <canvas\n          id=\"cavnas\"\n          width={window.innerWidth - 16}\n          height=\"256\"\n        ></canvas>\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}